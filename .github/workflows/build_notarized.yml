name: Make Notarized DMG Release

on: 
  workflow_dispatch:
    inputs:
      release-type:
        description: "Build type (product review or public release)"
        required: true
        default: review
        type: choice
        options:
        - review
        - release
        - review-sandbox
        - release-sandbox
      create-dmg:
        description: "Create DMG image"
        required: true
        default: false
        type: boolean
      asana-task-url:
        description: "Asana release task URL"
        required: false
        type: string
  workflow_call:
    inputs:
      release-type:
        description: "Build type (product review or public release)"
        required: true
        default: release
        type: string
      create-dmg:
        description: "Create DMG image"
        required: true
        default: true
        type: boolean
      asana-task-url:
        description: "Asana release task URL"
        required: true
        type: string
    secrets:
      BUILD_CERTIFICATE_BASE64:
        required: true
      P12_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      REVIEW_PROVISION_PROFILE_BASE64:
        required: true
      RELEASE_PROVISION_PROFILE_BASE64:
        required: true
      SSH_PRIVATE_KEY_FIND_IN_PAGE:
        required: true
      APPLE_API_KEY_BASE64:
        required: true
      APPLE_API_KEY_ID:
        required: true
      APPLE_API_KEY_ISSUER:
        required: true
      ASANA_ACCESS_TOKEN:
        required: true
      MM_HANDLES_BASE64:
        required: true
      MM_WEBHOOK_URL:
        required: true

jobs:
  export-notarized-app:

    name: Export Notarized App

    runs-on: macos-13

    outputs:
      app-version: ${{ steps.set-outputs.outputs.app-version }}
      app-name: ${{ steps.set-outputs.outputs.app-name }}
      asana-task-id: ${{ steps.get-task-id.outputs.task-id }}

    env:
      release-type: ${{ github.event.inputs.release-type || inputs.release-type }}
      create-dmg: ${{ github.event.inputs.create-dmg || inputs.create-dmg }}
      asana-task-url: ${{ github.event.inputs.asana-task-url || inputs.asana-task-url }}

    steps:

    - name: Install Apple Developer ID Application certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        REVIEW_PROVISION_PROFILE_BASE64: ${{ secrets.REVIEW_PROVISION_PROFILE_BASE64 }}
        RELEASE_PROVISION_PROFILE_BASE64: ${{ secrets.RELEASE_PROVISION_PROFILE_BASE64 }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        REVIEW_PP_PATH=$RUNNER_TEMP/review_pp.provisionprofile
        RELEASE_PP_PATH=$RUNNER_TEMP/release_pp.provisionprofile

        # import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$REVIEW_PROVISION_PROFILE_BASE64" | base64 --decode -o $REVIEW_PP_PATH
        echo -n "$RELEASE_PROVISION_PROFILE_BASE64" | base64 --decode -o $RELEASE_PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $REVIEW_PP_PATH $RELEASE_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Register SSH keys for submodules access
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FIND_IN_PAGE }}

    - name: Check out the code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set cache key hash
      run: |
        has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
        if [[ "$has_only_tags" == "true" ]]; then
          echo "cache_key_hash=${{ hashFiles('DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
        else
          echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
        fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v3
      with:
        path: DerivedData/SourcePackages
        key: ${{ runner.os }}-spm-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install xcbeautify
      continue-on-error: true
      run: brew install xcbeautify

    - name: Set Asana task URL
      if: env.asana-task-url
      run: echo "asana_task_url_arg=-a ${{ env.asana-task-url }}" >> $GITHUB_ENV

    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer

    - name: Archive and notarize the app
      id: archive
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        # import API Key from secrets
        export APPLE_API_KEY_PATH="$RUNNER_TEMP/apple_api_key.pem"
        echo -n "$APPLE_API_KEY_BASE64" | base64 --decode -o $APPLE_API_KEY_PATH

        ./scripts/archive.sh ${{ env.release-type }}

    - name: Set app name and version
      id: set-outputs
      run: |
        echo "app-version=${{ env.app-version }}" >> $GITHUB_OUTPUT
        echo "app-name=${{ env.app-name }}" >> $GITHUB_OUTPUT

    - name: Upload app artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.app
        path: ${{ github.workspace }}/release/DuckDuckGo-${{ env.app-version }}.zip

    - name: Upload dSYMs artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ env.release-type }}-dSYM-${{ env.app-version }}
        path: ${{ github.workspace }}/release/DuckDuckGo-${{ env.app-version }}-dSYM.zip

    - name: Upload DMG background
      if: env.create-dmg || env.asana-task-url
      uses: actions/upload-artifact@v3
      with:
        name: dmg-background.png
        path: ${{ github.workspace }}/scripts/assets/dmg-background.png
        retention-days: 1

    - name: Get Asana Task ID
      id: get-task-id
      if: env.asana-task-url
      run: |
        task_url_regex='^https://app.asana.com/[0-9]/[0-9]*/([0-9]*)/f$'
        if [[ "${{ env.asana-task-url }}" =~ ${task_url_regex} ]]; then
          echo "task-id=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
        else
          echo "::error::Asana Task URL has incorrect format (attempted to match ${task_url_regex})."
        fi

    - name: Upload dSYMs to Asana
      if: env.asana-task-url
      env:
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        dsym_zip_path="${{ github.workspace }}/release/DuckDuckGo-${{ env.app-version }}-dSYM.zip"

        curl -s "https://app.asana.com/api/1.0/tasks/${{ steps.get-task-id.outputs.task-id }}/attachments" \
          -H "Authorization: Bearer ${{ env.ASANA_ACCESS_TOKEN }}" \
          --form "file=@${dsym_zip_path};type=application/zip"

    - name: Send Mattermost message
      env:
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        ASANA_TASK_URL: ${{ env.asana-task-url }}
        RELEASE_TYPE: ${{ env.release-type }}
      run: |
        export MM_USER_HANDLE=$(base64 -d <<< ${{ secrets.MM_HANDLES_BASE64 }} | jq ".${{ github.actor }}" | tr -d '"')

        if [[ -z "${MM_USER_HANDLE}" ]]; then
            echo "Mattermost user handle not known for ${{ github.actor }}, skipping sending message"
        else

            if [[ -n "${ASANA_TASK_URL}" ]]; then
                export ASANA_LINK=" | [:asana: Asana task](${ASANA_TASK_URL})"
            fi

            curl -s -H 'Content-type: application/json' \
                -d "$(envsubst < ./scripts/assets/release-mm-template.json)" \
                ${{ secrets.MM_WEBHOOK_URL }}
        fi

  create-dmg:

    name: Create DMG
    needs: export-notarized-app
    if: ${{ github.event.inputs.create-dmg || inputs.create-dmg }}

    runs-on: macos-12

    env:
      app-version: ${{ needs.export-notarized-app.outputs.app-version }}
      app-name: ${{ needs.export-notarized-app.outputs.app-name }}
      asana-task-id: ${{ needs.export-notarized-app.outputs.asana-task-id }}
      release-type: ${{ github.event.inputs.release-type || inputs.release-type }}

    steps:

    - name: Fetch app bundle
      uses: actions/download-artifact@v3
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.app
        path: ${{ github.workspace }}/dmg/${{ env.app-name }}.app

    - name: Fetch DMG background
      uses: actions/download-artifact@v3
      with:
        name: dmg-background.png
        path: ${{ github.workspace }}
  
    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create DMG
      run: |
        create-dmg --volname "${{ env.app-name }}" \
            --icon "${{ env.app-name }}.app" 140 160 \
            --background "dmg-background.png" \
            --window-size 600 400 \
            --icon-size 120 \
            --app-drop-link 430 160 "duckduckgo-${{ env.app-version }}.dmg" \
            "dmg"

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.dmg
        path: ${{ github.workspace }}/release/duckduckgo*-${{ env.app-version }}.dmg

    - name: Upload DMG to Asana
      if: env.asana-task-id
      env:
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        dmg_path="${{ github.workspace }}/duckduckgo-${{ env.app-version }}.dmg"

        curl -s "https://app.asana.com/api/1.0/tasks/${{ env.asana-task-id }}/attachments" \
          -H "Authorization: Bearer ${{ env.ASANA_ACCESS_TOKEN }}" \
          --form "file=@${dmg_path};type=application/zip"

name: Make Release Build

on: 
  workflow_dispatch:
    inputs:
      release-type:
        description: "Build type (product review or public release)"
        required: true
        default: review
        type: choice
        options:
        - review
        - release
        - review-appstore
        - release-appstore
      create-dmg:
        description: "Create DMG image"
        required: true
        default: false
        type: boolean
      asana-task-url:
        description: "Asana release task URL"
        required: false
        type: string

jobs:
  export-notarized-app:

    name: Export Notarized App

    runs-on: macos-12

    steps:

    - name: Install Apple Developer ID Application certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        REVIEW_PROVISION_PROFILE_BASE64: ${{ secrets.REVIEW_PROVISION_PROFILE_BASE64 }}
        RELEASE_PROVISION_PROFILE_BASE64: ${{ secrets.RELEASE_PROVISION_PROFILE_BASE64 }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        REVIEW_PP_PATH=$RUNNER_TEMP/review_pp.provisionprofile
        RELEASE_PP_PATH=$RUNNER_TEMP/release_pp.provisionprofile

        # import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$REVIEW_PROVISION_PROFILE_BASE64" | base64 --decode --output $REVIEW_PP_PATH
        echo -n "$RELEASE_PROVISION_PROFILE_BASE64" | base64 --decode --output $RELEASE_PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $REVIEW_PP_PATH $RELEASE_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Register SSH keys for submodules access
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_FIND_IN_PAGE }}
          ${{ secrets.SSH_PRIVATE_KEY_PRIVACY_DASHBOARD }}

    - name: Check out the code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install xcbeautify
      continue-on-error: true
      run: brew install xcbeautify

    - name: Install create-dmg
      if: ${{ github.event.inputs.create-dmg == true || github.event.inputs.asana-task-url }}
      run: |
        brew install create-dmg
        echo "create_dmg_arg=-d" >> $GITHUB_ENV

    - name: Set Asana task URL
      if: github.event.inputs.asana-task-url
      run: echo "asana_task_url_arg=-a ${{ github.event.inputs.asana-task-url }}" >> $GITHUB_ENV

    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer

    - name: Archive and notarize the app
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
        ASANA_COMMA_SEPARATED_TASK_NAMES_TO_BE_CLOSED: ${{ secrets.ASANA_COMMA_SEPARATED_TASK_NAMES_TO_BE_CLOSED }}
      run: |
        # import API Key from secrets
        export APPLE_API_KEY_PATH="$RUNNER_TEMP/apple_api_key.pem"
        echo -n "$APPLE_API_KEY_BASE64" | base64 --decode --output $APPLE_API_KEY_PATH

        ./scripts/archive.sh ${{ github.event.inputs.release-type }} \
            ${{ env.create_dmg_arg }} \
            ${{ env.asana_task_url_arg }}

    - name: Upload app artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ github.event.inputs.release-type }}-${{ env.app_version }}.app
        path: ${{ github.workspace }}/release/DuckDuckGo-${{ env.app_version }}.zip

    - name: Upload dSYMs artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ github.event.inputs.release-type }}-dSYM-${{ env.app_version }}
        path: ${{ github.workspace }}/release/DuckDuckGo-${{ env.app_version }}-dSYM.zip

    - name: Upload DMG artifact
      if: github.event.inputs.create-dmg || github.event.inputs.asana-task-url
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-${{ github.event.inputs.release-type }}-${{ env.app_version }}.dmg
        path: ${{ github.workspace }}/release/duckduckgo*-${{ env.app_version }}.dmg

    - name: Send Mattermost message
      env:
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        ASANA_TASK_URL: ${{ github.event.inputs.asana-task-url }}
        RELEASE_TYPE: ${{ github.event.inputs.release-type }}
      run: |
        export MM_USER_HANDLE=$(base64 -d <<< ${{ secrets.MM_HANDLES_BASE64 }} | jq ".${{ github.actor }}" | tr -d '"')

        if [[ -z "${MM_USER_HANDLE}" ]]; then
            echo "Mattermost user handle not known for ${{ github.actor }}, skipping sending message"
        else

            if [[ -n "${ASANA_TASK_URL}" ]]; then
                export ASANA_LINK=" | [:asana: Asana task](${ASANA_TASK_URL})"
            fi

            curl -s -H 'Content-type: application/json' \
                -d "$(envsubst < ./scripts/assets/release-mm-template.json)" \
                ${{ secrets.MM_WEBHOOK_URL }}
        fi

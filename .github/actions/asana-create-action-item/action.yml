name: Add a Subtask to Asana Release Automation Task
description: Adds a task with an action item to the Asana release task's "Automation" subtask
inputs:
  access-token:
    description: "Asana access token"
    required: true
    type: string
  release-task-url:
    description: "Asana release task URL"
    required: true
    type: string
  task-name:
    description: "Task name"
    required: false
    type: string
  notes:
    description: "Task notes"
    required: false
    type: string
  html-notes:
    description: "Task HTML notes"
    required: false
    type: string
  template-name:
    description: |
      Name of a template file (without extension) for the task content, relative to 'templates' subdirectory of the action.
      The file is processed by envsubst before being sent to Asana.
    required: false
    type: string
outputs:
  assignee-id:
    description: "Assignee ID"
    value: ${{ steps.set-assignee-id.outputs.assignee-id }}
  new-task-id:
    description: "New task ID"
    value: ${{ steps.create-task.outputs.new-task-id }}
runs:
  using: "composite"
  steps:
    - id: get-automation-subtask
      uses: ./.github/actions/asana-get-release-automation-subtask-id
      with:
        access-token: ${{ inputs.access-token }}
        task-url: ${{ inputs.release-task-url }}

    - id: get-asana-user-id
      if: github.event_name != "schedule"
      uses: duckduckgo/apple-infra/actions/asana-get-user-id-for-github-handle@main
      with:
        access-token: ${{ inputs.access-token }}
        github-handle: ${{ github.actor }}

    - id: set-assignee-id
      shell: bash
      env:
        USER_ID: ${{ steps.get-asana-user-id.outputs.user-id || steps.get-automation-subtask.outputs.assignee-id }}
      run: |
        echo "assignee-id=${USER_ID}" >> $GITHUB_OUTPUT

    - id: process-template-payload
      if: ${{ inputs.template-name }}
      shell: bash
      env:
        ASSIGNEE_ID: ${{ steps.set-assignee-id.outputs.assignee-id }}
        AUTOMATION_TASK_ID: ${{ steps.get-automation-subtask.outputs.automation-task-id }}
        TEMPLATE_PATH: ${{ github.action_path }}/templates/${{ inputs.template-name }}.yml
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        if [ ! -f $TEMPLATE_PATH ]; then
          echo "::error::Template file not found at $TEMPLATE_PATH"
          exit 1
        fi

        # Process the template file with envsubst, turn into JSON, remove leading spaces and newlines on non-empty lines, and compact the JSON
        payload="$(envsubst < $TEMPLATE_PATH | yq -o=j | sed -E 's/\\n( *)([^\\n])/\2/g' | jq -c)"
        echo "payload-base64=$(base64 <<< $payload)" >> $GITHUB_OUTPUT

    - id: process-notes-payload
      if: ${{ inputs.notes }}
      shell: bash
      env:
        ASSIGNEE_ID: ${{ steps.set-assignee-id.outputs.assignee-id }}
        AUTOMATION_TASK_ID: ${{ steps.get-automation-subtask.outputs.automation-task-id }}
        NOTES: ${{ inputs.notes }}
        TASK_NAME: ${{ inputs.task-name }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        payload="{ \"data\": { \"name\": \"${TASK_NAME}\", \"notes\": \"${NOTES}\n\nðŸ”— Workflow URL: ${WORKFLOW_URL}\", \"assignee\": \"${ASSIGNEE_ID}\" } }"
        echo "payload-base64=$(base64 <<< $payload)" >> $GITHUB_OUTPUT

    - id: process-html-notes-payload
      if: ${{ inputs.html-notes }}
      shell: bash
      env:
        ASSIGNEE_ID: ${{ steps.set-assignee-id.outputs.assignee-id }}
        AUTOMATION_TASK_ID: ${{ steps.get-automation-subtask.outputs.automation-task-id }}
        HTML_NOTES: ${{ inputs.html-notes }}
        TASK_NAME: ${{ inputs.task-name }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        payload="{ \"data\": { \"name\": \"${TASK_NAME}\", \"html_notes\": \"${HTML_NOTES}\", \"assignee\": \"${ASSIGNEE_ID}\" } }"
        echo "payload-base64=$(base64 <<< $payload)" >> $GITHUB_OUTPUT

    - id: create-task
      shell: bash
      env:
        ASANA_ACCESS_TOKEN: ${{ inputs.access-token }}
        ASSIGNEE_ID: ${{ steps.set-assignee-id.outputs.assignee-id }}
        TASK_ID: ${{ steps.get-automation-subtask.outputs.automation-task-id }}
        PAYLOAD_BASE64: ${{ steps.process-template-payload.outputs.payload-base64 || steps.process-notes-payload.outputs.payload-base64 || steps.process-html-notes-payload.outputs.payload-base64 }}
      run: |
        # Create a subtask and retrieve its ID from the response (.data.gid) to return as an output
        new_task_id=$(set -o pipefail && curl -fLSs "https://app.asana.com/api/1.0/tasks/${TASK_ID}/subtasks?opt_fields=gid" \
          -H "Authorization: Bearer ${ASANA_ACCESS_TOKEN}" \
          -H 'content-type: application/json' \
          -d "$(base64 -d <<< $PAYLOAD_BASE64)" | jq -r .data.gid)
        echo "new-task-id=$new_task_id" >> $GITHUB_OUTPUT
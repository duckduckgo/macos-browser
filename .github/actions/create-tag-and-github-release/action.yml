name: Tag Repository and Create GitHub Release
description: Tags the repository and creates a GitHub release
inputs:
  prerelease:
    description: "Whether the release is a prerelease"
    required: false
    type: boolean
    default: true
  github-token:
    description: "GitHub token"
    required: true
    type: string
outputs:
  promoted-tag:
    description: "Pre-release tag (x.y.z-N) that has been promoted to a release tag (x.y.z)"
    value: ${{ steps.compute-tag.outputs.promoted-tag }}
  tag:
    description: "Tag that has been added (x.y.z-N for internal, x.y.z for public and hotfixes)"
    value: ${{ steps.compute-tag.outputs.tag }}
  tag-created:
    description: "Whether the tag has been created"
    value: ${{ steps.tag-repo.conclusion == 'success' }}
runs:
  using: "composite"
  steps:
    - id: setup-git
      shell: bash
      run: |
        git config --global user.name "Dax the Duck"
        git config --global user.email "dax@duckduckgo.com"

    - id: compute-tag
      shell: bash
      run: |
        version="$(cut -d ' ' -f 3 < Configuration/Version.xcconfig)"
        build_number="$(cut -d ' ' -f 3 < Configuration/BuildNumber.xcconfig)"
        if [[ "${{ inputs.prerelease }}" == "true" ]]; then
          tag="${version}-${build_number}"
        else
          tag="${version}"
          promoted_tag="${version}-${build_number}"
          echo "promoted-tag=${promoted_tag}" >> $GITHUB_OUTPUT
        fi
        echo "tag=${tag}" >> $GITHUB_OUTPUT

    - id: tag-repo
      shell: bash
      run: |
        git tag ${{ steps.compute-tag.outputs.tag }}
        git push origin ${{ steps.compute-tag.outputs.tag }}

    - id: create-github-release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        latest_release="$(gh api /repos/${{ github.repository }}/releases/latest --jq '.tag_name')"
        if [[ "${{ inputs.prerelease }}" == "true" ]]; then
          gh release create ${{ steps.compute-tag.outputs.tag }} --generate-notes --prerelease --notes-start-tag ${latest_release}
        else
          gh release create ${{ steps.compute-tag.outputs.tag }} --generate-notes --latest --notes-start-tag ${latest_release}
        fi

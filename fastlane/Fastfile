# frozen_string_literal: true
opt_out_usage

UI.abort_with_message!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

default_platform(:mac)

platform :mac do
  before_all do
    setup_ci if is_ci
  end

  #################################################
  # Public lanes
  #################################################

  # Fetches and updates certificates and provisioning profiles for App Store distribution
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for App Store distribution'
  lane :sync_signing do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for DMG distribution
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for DMG distribution'
  lane :sync_signing_dmg_release do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for DMG Review builds
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for DMG Review builds'
  lane :sync_signing_dmg_review do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for CI builds
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for CI builds'
  lane :sync_signing_ci do |options|
    do_sync_signing(options)
  end

  # Makes App Store release build and uploads it to TestFlight without managing App Store listing.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to TestFlight'
  lane :release_testflight do |options|
    build_release(options)

    upload_to_testflight(options.merge({api_key: get_api_key}))
  end

  # Makes App Store Review build and uploads it to TestFlight without managing App Store listing.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to TestFlight'
  lane :release_testflight_review do |options|
    build_review(options)

    upload_to_testflight(
      options.merge(
        {
          api_key: get_api_key,
          app_identifier: "com.duckduckgo.mobile.ios.review"
        }
      )
    )
  end

  desc 'Promotes the latest TestFlight build to App Store without submitting for review'
  lane :promote_latest_testflight_to_appstore do |options|

    latest_build_info = fetch_testflight_build_number(options)
    latest_build_number = lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]   
    latest_build_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]

    UI.message("The latest build number #{latest_build_number} of the latest version: #{latest_build_version}")

    upload_metadata(options.merge({
      build_number: latest_build_number.to_s,
      app_version: latest_build_version.to_s,
    }))

  end
  # Makes App Store release build, uploads it to TestFlight, and prepares App Store listing for submission.
  #
  # - it first uploads just the build, and only then attempts uploading metadata.
  # - since metadata upload may fail if there's an iOS submission in Pending Developer Release,
  #   it catches upload_metadata error and prints further instructions.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to App Store Connect'
  lane :release_appstore do |options|
    build_release(options)

    deliver(common_deliver_arguments(options))

    begin
      upload_metadata(options)
    rescue => exception
      UI.user_error! %{Failed to upload metadata: #{exception}
1. Your build has been successfully uploaded, it's only a problem with App Store metadata.
2. It's possible that there is a submission for another platform (iOS) in a non-editable state
  (e.g. Pending Developer Release, Developer Rejected, Rejected or Metadata Rejected).
3. Before you retry, ensure that the pending iOS release is completed (Ready for Sale) or moved
  back to "Prepare for Submission". If it can't be done at the moment and you can't wait, you'll need
  to update metadata manually.
4. Use upload_metadata lane to only handle metadata (without building the release and uploading a build):
  $ bundle exec fastlane upload_metadata
      }
    end
  end

  desc 'Creates a new Kechain to use on UI tests'
  lane :create_keychain_ui_tests do |options|
    create_keychain(
      name: "DefaultKeychain",
      password: "default",
      default_keychain: true,
      unlock: true,
      timeout: 54000,
      lock_when_sleeps: false
    )
  end

  #################################################
  # Helper functions
  #################################################

  # Updates App Store metadata.
  #
  # - Calls deliver and skips binary upload and screenshots, only handling metadata.
  #
  private_lane :upload_metadata do |options|
    deliver(common_deliver_arguments(options).merge({
      skip_binary_upload: true,
      skip_metadata: false,
      version_check_wait_retry_limit: 1
    }))
  end
  
  private_lane :get_api_key do
    has_api_key = [
      "APPLE_API_KEY_ID",
      "APPLE_API_KEY_ISSUER",
      "APPLE_API_KEY_BASE64"
    ].map {|x| ENV.has_key? x}.reduce(&:&)

    if has_api_key
      app_store_connect_api_key(
        key_id: ENV["APPLE_API_KEY_ID"],
        issuer_id: ENV["APPLE_API_KEY_ISSUER"],
        key_content: ENV["APPLE_API_KEY_BASE64"],
        is_key_content_base64: true
      )
    else
      nil
    end
  end

  private_lane :get_username do |options|
    if is_ci
      nil # not supported in CI
    elsif options[:username]
      options[:username]
    else
      git_user_email = Action.sh("git", "config", "user.email").chomp
      if git_user_email.end_with? "@duckduckgo.com"
        git_user_email
      end
    end
  end

  # Synchronizes certificates and provisioning profiles for App Store distribution.
  #
  # - runs in read-only mode in CI.
  #
  private_lane :do_sync_signing do |options|
    sync_code_signing(
      api_key: get_api_key,
      username: get_username(options),
      readonly: is_ci
    )
  end

  # Builds the App Store release version of the app.
  #
  private_lane :build_release do |options|
    sync_signing(options)

    build_app(
      export_method: "app-store",
      scheme: "DuckDuckGo Privacy Browser App Store",
      export_options: "scripts/assets/AppStoreExportOptions.plist",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation RELEASE_PRODUCT_NAME_OVERRIDE=DuckDuckGo"
    )
  end

  # Builds the App Store review version of the app.
  #
  private_lane :build_review do |options|
    sync_signing(options)

    build_app(
      export_method: "app-store",
      scheme: "Product Review Release App Store",
      export_options: "scripts/assets/AppStoreExportOptions.plist",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation"
    )
  end

  private_lane :fetch_testflight_build_number do |options|
    build_number = latest_testflight_build_number(
      api_key: get_api_key,
      username: get_username(options),
      platform: 'osx'
    )
    build_number
  end

  def common_deliver_arguments(options)
    args = {
      api_key: get_api_key,
      submit_for_review: false,
      automatic_release: false,
      phased_release: true,
      force: true,
      skip_screenshots: true,
      skip_metadata: true,
      precheck_include_in_app_purchases: false,
      submission_information: {
         add_id_info_uses_idfa: false
      }
    }.merge(options)

    unless args.has_key? :username
      args[:username] = get_username(options)
    end
    args
  end
end

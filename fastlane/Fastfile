# frozen_string_literal: true
opt_out_usage
fastlane_require 'httparty'
fastlane_require 'rexml/document'

UI.abort_with_message!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

########################################################################
# Environment Variables
########################################################################
DEFAULT_BRANCH = 'main'
RELEASE_BRANCH = 'release'
HOTFIX_BRANCH = 'hotfix'
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
INFO_PLIST = File.join(PROJECT_ROOT_FOLDER, 'DuckDuckGo/Info.plist')
VERSION_CONFIG_PATH = File.join(PROJECT_ROOT_FOLDER, 'Configuration/Version.xcconfig')
BUILD_NUMBER_CONFIG_PATH = File.join(PROJECT_ROOT_FOLDER, 'Configuration/BuildNumber.xcconfig')
VERSION_CONFIG_DEFINITION = 'MARKETING_VERSION'
BUILD_NUMBER_CONFIG_DEFINITION = 'CURRENT_PROJECT_VERSION'
UPGRADABLE_EMBEDDED_FILES = [
  'DuckDuckGo/ContentBlocker/AppTrackerDataSetProvider.swift',
  'DuckDuckGo/ContentBlocker/trackerData.json',
  'DuckDuckGo/ContentBlocker/AppPrivacyConfigurationDataProvider.swift',
  'DuckDuckGo/ContentBlocker/macos-config.json'
].freeze

default_platform(:mac)

platform :mac do
  before_all do
    setup_ci if is_ci
  end

  #################################################
  # Public lanes
  #################################################

  # Fetches and updates certificates and provisioning profiles for App Store distribution
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for App Store distribution'
  lane :sync_signing do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for DMG distribution
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for DMG distribution'
  lane :sync_signing_dmg_release do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for DMG Review builds
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for DMG Review builds'
  lane :sync_signing_dmg_review do |options|
    do_sync_signing(options)
  end

  # Fetches and updates certificates and provisioning profiles for CI builds
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Fetches and updates certificates and provisioning profiles for CI builds'
  lane :sync_signing_ci do |options|
    do_sync_signing(options)
  end

  # Makes App Store release build and uploads it to TestFlight without managing App Store listing.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to TestFlight'
  lane :release_testflight do |options|
    build_release(options)

    upload_to_testflight(options.merge({api_key: get_api_key}))
  end

  # Makes App Store Review build and uploads it to TestFlight without managing App Store listing.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to TestFlight'
  lane :release_testflight_review do |options|
    build_review(options)

    upload_to_testflight(
      options.merge(
        {
          api_key: get_api_key,
          app_identifier: "com.duckduckgo.mobile.ios.review"
        }
      )
    )
  end

  desc 'Promotes the latest TestFlight build to App Store without submitting for review'
  lane :promote_latest_testflight_to_appstore do |options|

    latest_build_info = fetch_testflight_build_number(options)
    latest_build_number = lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]   
    latest_build_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]

    UI.message("The latest build number #{latest_build_number} of the latest version: #{latest_build_version}")

    upload_metadata(options.merge({
      build_number: latest_build_number.to_s,
      app_version: latest_build_version.to_s,
    }))

  end
  # Makes App Store release build, uploads it to TestFlight, and prepares App Store listing for submission.
  #
  # - it first uploads just the build, and only then attempts uploading metadata.
  # - since metadata upload may fail if there's an iOS submission in Pending Developer Release,
  #   it catches upload_metadata error and prints further instructions.
  #
  # @option [String] username (default: nil) Your DDG Apple ID. Pass it to not be asked
  #         for it a couple of times during the process.
  #
  desc 'Makes App Store release build and uploads it to App Store Connect'
  lane :release_appstore do |options|
    build_release(options)

    deliver(common_deliver_arguments(options))

    begin
      upload_metadata(options)
    rescue => exception
      UI.user_error! %{Failed to upload metadata: #{exception}
1. Your build has been successfully uploaded, it's only a problem with App Store metadata.
2. It's possible that there is a submission for another platform (iOS) in a non-editable state
  (e.g. Pending Developer Release, Developer Rejected, Rejected or Metadata Rejected).
3. Before you retry, ensure that the pending iOS release is completed (Ready for Sale) or moved
  back to "Prepare for Submission". If it can't be done at the moment and you can't wait, you'll need
  to update metadata manually.
4. Use upload_metadata lane to only handle metadata (without building the release and uploading a build):
  $ bundle exec fastlane upload_metadata
      }
    end
  end

  # Updates App Store metadata.
  #
  # - Calls deliver and skips binary upload and screenshots, only handling metadata.
  #
  desc 'Updates App Store metadata'
  lane :upload_metadata do |options|
    deliver(common_deliver_arguments(options).merge({
      skip_binary_upload: true,
      skip_metadata: false,
      version_check_wait_retry_limit: 1
    }))
  end

  # Creates a new release branch and updates embedded files.
  #
  # - Cuts a new release branch
  # - Updates submodules and embedded files
  # - Pushes changes to remote
  #
  # @option [String] version (default: nil) Marketing version string
  #
  desc 'Executes the release preparation work in the repository'
  lane :make_release_branch do |options|
    begin
      macos_codefreeze_prechecks
      new_version = validate_new_version(options)
      macos_create_release_branch(version: new_version)
      macos_update_embedded_files
      macos_update_version_config(version: new_version)
      sh('git', 'push')

      sh("echo \"release_branch_name=#{RELEASE_BRANCH}/#{new_version}\" >> $GITHUB_OUTPUT") if is_ci

    rescue => exception
      if exception.message == "Tests have failed"
        UI.user_error! %{Tests have failed.
* If you believe the failing test is flaky, please retry the same fastlane command,
  appending `resume:true`.
* If the failure looks legitimate, try to fix it, commit the fix (be sure to only
  include the files you've changed while making a fix and leave other changed files
  unmodified), and run the command again appending `resume:true`.
        }
      else
        raise exception
      end
    end
  end

  # Executes the release preparation work in the repository
  #
  # - Cuts a new release branch
  # - Updates submodules and embedded files
  # - Pushes changes to remote
  #
  # @option [String] version (default: nil) Marketing version string
  # @option [Boolean] resume (default: false) If true, the lane can run from a release/ branch and will run dedicated prechecks.
  #
  desc 'Executes the release preparation work in the repository'
  lane :code_freeze do |options|
    begin
      options[:resume]? macos_codefreeze_resume_prechecks : macos_codefreeze_prechecks
      new_version = validate_new_version(options)
      build_number = increment_current_build_number(options)
      macos_create_release_branch(version: new_version) unless options[:resume]
      macos_update_embedded_files
      macos_update_version_and_build_number_config(
        version: new_version,
        build_number: build_number
      )
      sh('git', 'push')

    rescue => exception
      if exception.message == "Tests have failed"
        UI.user_error! %{Tests have failed.
* If you believe the failing test is flaky, please retry the same fastlane command,
  appending `resume:true`.
* If the failure looks legitimate, try to fix it, commit the fix (be sure to only
  include the files you've changed while making a fix and leave other changed files
  unmodified), and run the command again appending `resume:true`.
        }
      else
        raise exception
      end
    end
  end

  # Bumps build number for the current version and updates embedded files.
  # Pushes changes to remote.
  #
  # - Should be called on an existing internal release branch.
  # - When not in CI, it updates embedded files and runs unit tests.
  #
  # @option [Boolean] update_embedded_files (default: true) Set to false to skip updating embedded files (used by CI).
  #
  desc 'Prepares new internal release on top of an existing one'
  lane :bump_internal_release do |options|
    begin
      unless git_branch.start_with?(RELEASE_BRANCH)
        UI.abort_with_message!("Incorrect branch. Branch name must start with '#{RELEASE_BRANCH}/'.")
      end

      update_embedded_files = options[:update_embedded_files].nil? ? true : options[:update_embedded_files]
      current_version = macos_current_version
      current_build_number = macos_current_build_number
      build_number = increment_current_build_number(options)

      UI.important("Current version in project settings is #{current_version} (#{current_build_number}).")
      UI.important("Will be updated to #{current_version} (#{build_number}).")

      if UI.interactive?
        unless UI.confirm("Do you want to continue?")
          UI.abort_with_message!('Aborted by user.')
        end
      end

      macos_update_embedded_files if update_embedded_files
      macos_update_version_and_build_number_config(
        version: current_version,
        build_number: build_number
      )
      sh('git', 'push')

    rescue => exception
      if exception.message == "Tests have failed"
        UI.user_error! %{Tests have failed.
* If you believe the failing test is flaky, please retry the same fastlane command.
* If the failure looks legitimate, try to fix it, commit the fix (be sure to only
  include the files you've changed while making a fix and leave other changed files
  unmodified), and run the command again appending `resume:true`.
        }
      else
        raise exception
      end
    end
  end

  # Executes the hotfix release preparation work in the repository
  #
  # - Creates a new hotfix release branch
  # - Updates version and build number
  # - Pushes changes to remote
  #
  # @option [String] version Marketing version string to be hotfixed (must be equal to an existing tag)
  #
  desc 'Executes the hotfix release preparation work in the repository'
  lane :prepare_hotfix do |options|
    UI.user_error! 'You must provide a version you want to hotfix.' unless options[:version]

    source_version = validate_version_exists(options)
    new_version = validate_hotfix_version(source_version: source_version)

    build_number = increment_current_build_number(options)
    macos_create_hotfix_branch(source_version: source_version, new_version: new_version)
    macos_update_version_and_build_number_config(
      version: new_version,
      build_number: build_number
    )
    sh('git', 'push')

    sh("echo \"release_branch_name=#{HOTFIX_BRANCH}/#{new_version}\" >> $GITHUB_OUTPUT") if is_ci
  end

  # Updates embedded files and pushes to remote.
  # Only for CI use, where unit tests are run as a separate job.
  #
  desc 'Updates embedded files and pushes to remote.'
  lane :update_embedded_files do |options|
    UI.user_error! 'This lane should only be used in CI.' unless is_ci
    macos_update_embedded_files
    sh('git', 'push')
  end

  # Updates marketing version to the specified one and increments build number by 1.
  #
  # @option [String] version Marketing version string.
  #
  desc 'Executes the release preparation work in the repository'
  lane :set_version do |options|
    unless options[:version]
      UI.user_error! 'You must provide a version.'
    end
    new_version = validate_new_version(options)
    build_number = increment_current_build_number(options)
    macos_update_version_and_build_number_config(
      version: new_version,
      build_number: build_number
    )
  end

  desc 'Creates a new Kechain to use on UI tests'
  lane :create_keychain_ui_tests do |options|
    create_keychain(
      name: "DefaultKeychain",
      password: "default",
      default_keychain: true,
      unlock: true,
      timeout: 54000,
      lock_when_sleeps: false
    )
  end

  #################################################
  # Helper functions
  #################################################
  private_lane :get_api_key do
    has_api_key = [
      "APPLE_API_KEY_ID",
      "APPLE_API_KEY_ISSUER",
      "APPLE_API_KEY_BASE64"
    ].map {|x| ENV.has_key? x}.reduce(&:&)

    if has_api_key
      app_store_connect_api_key(
        key_id: ENV["APPLE_API_KEY_ID"],
        issuer_id: ENV["APPLE_API_KEY_ISSUER"],
        key_content: ENV["APPLE_API_KEY_BASE64"],
        is_key_content_base64: true
      )
    else
      nil
    end
  end

  private_lane :get_username do |options|
    if is_ci
      nil # not supported in CI
    elsif options[:username]
      options[:username]
    else
      git_user_email = Action.sh("git", "config", "user.email").chomp
      if git_user_email.end_with? "@duckduckgo.com"
        git_user_email
      end
    end
  end

  # Synchronizes certificates and provisioning profiles for App Store distribution.
  #
  # - runs in read-only mode in CI.
  #
  private_lane :do_sync_signing do |options|
    sync_code_signing(
      api_key: get_api_key,
      username: get_username(options),
      readonly: is_ci
    )
  end

  # Builds the App Store release version of the app.
  #
  private_lane :build_release do |options|
    sync_signing(options)

    build_app(
      export_method: "app-store",
      scheme: "DuckDuckGo Privacy Browser App Store",
      export_options: "scripts/assets/AppStoreExportOptions.plist",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation RELEASE_PRODUCT_NAME_OVERRIDE=DuckDuckGo"
    )
  end

  # Builds the App Store review version of the app.
  #
  private_lane :build_review do |options|
    sync_signing(options)

    build_app(
      export_method: "app-store",
      scheme: "Product Review Release App Store",
      export_options: "scripts/assets/AppStoreExportOptions.plist",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation"
    )
  end

  # Ensures that the local repository is in good shape for the release:
  #
  # - Checks out the default branch
  # - Ensures git status is clean
  #
  private_lane :macos_codefreeze_prechecks do
    ensure_git_status_clean 

    ensure_git_branch(branch: DEFAULT_BRANCH)
    git_pull

    git_submodule_update(recursive: true, init: true)
    ensure_git_status_clean
  end

  # Ensures that the local repository is in a resumable state:
  #
  # - Validates the current branch
  # - Validates not committed changes 
  #
  private_lane :macos_codefreeze_resume_prechecks do
    unless git_branch.start_with?(RELEASE_BRANCH) 
      UI.abort_with_message!("Not in a resumable state: should be a #{RELEASE_BRANCH} branch")
    end

    git_status = sh("git", "status")
    message = 'There are no changes in the current branch.'
    unless git_status.include?('nothing to commit, working tree clean')
      git_changes = git_status.split("\n").select { |line| line.include?('modified:')}.join("\n")
      message = "Current branch contains these changes:\n #{git_changes}."
    end

    UI.important(message)
    UI.abort_with_message!('Aborted by user.') unless UI.confirm("Do you want to continue?")
  end

  # Calculates the new version or validates the provided one, if it exists
  # and prompts the user to confirm
  #
  # @option [String] version (default: nil) Marketing version string
  #
  private_lane :validate_new_version do |options|
    current_version = macos_current_version
    user_version = format_user_version(options[:version])
    new_version = user_version.nil? ? macos_bump_minor_version(current_version) : user_version

    UI.important("Current version in project settings is #{current_version}.")
    UI.important("New version is #{new_version}.")

    if UI.interactive?
      UI.abort_with_message!('Aborted by user.') unless UI.confirm("Do you want to continue?")
    end
    new_version
  end

  private_lane :validate_version_exists do |options|
    user_version = format_user_version(options[:version])
    UI.user_error! "Incorrect version provided: #{options[:version]}. Expected x.y.z format." unless user_version

    Action.sh('git', 'fetch', '--tags')
    existing_tag = sh('git', 'tag', '--list', user_version).chomp
    existing_tag = existing_tag.empty? ? nil : existing_tag

    UI.user_error! "Release #{user_version} not found. Make sure you've passed the version you want to make hotfix for, not the upcoming hotfix version." unless existing_tag
    existing_tag
  end

  # Bumps provided version for hotfixing and presents to the user for confirmation.
  #
  # @option [String] source_version Marketing version string of the release that needs to be hotfixed.
  #
  private_lane :validate_hotfix_version do |options|
    source_version = options[:source_version]
    new_version = macos_bump_patch_version(source_version)

    UI.important("Release #{source_version} will be hotfixed as #{new_version}.")

    if UI.interactive?
      unless UI.confirm("Do you want to continue?")
        UI.abort_with_message!('Aborted by user.')
      end
    end

    new_version
  end

  # Checks current build number in Sparkle's appcast.xml and TestFlight
  # and increments it by 1.
  #
  desc 'Increment build number'
  private_lane :increment_current_build_number do |options|
    testflight_build_number = fetch_testflight_build_number(options)
    appcast_build_number = fetch_appcast_build_number
    xcodeproj_build_number = macos_current_build_number
    current_release_build_number = [testflight_build_number, appcast_build_number].max

    UI.message("TestFlight build number: #{testflight_build_number}")
    UI.message("Appcast.xml build number: #{appcast_build_number}")
    UI.message("Latest release build number (max of TestFlight and appcast): #{current_release_build_number}")
    UI.message("Xcode project settings build number: #{xcodeproj_build_number}")

    if xcodeproj_build_number <= current_release_build_number
      new_build_number = current_release_build_number
    else
      UI.important "Warning: Build number from Xcode project (#{xcodeproj_build_number}) is higher than the current release (#{current_release_build_number})."
      UI.message %{This may be an error in the Xcode project settings, or it may mean that there is a hotfix
release in progress and you're making a follow-up internal release that includes the hotfix.}
      if UI.interactive?
        build_numbers = {
          "Current release (#{current_release_build_number})" => current_release_build_number,
          "Xcode project (#{xcodeproj_build_number})" => xcodeproj_build_number,
        }
        choice = UI.select "Please choose which build number to bump:", build_numbers.keys
        new_build_number = build_numbers[choice]
      else
        UI.important("Shell is non-interactive, so we'll bump the Xcode project build number.")
        new_build_number = xcodeproj_build_number
      end
    end

    new_build_number + 1
  end

  private_lane :fetch_testflight_build_number do |options|
    build_number = latest_testflight_build_number(
      api_key: get_api_key,
      username: get_username(options),
      platform: 'osx'
    )
    build_number
  end

  private_lane :fetch_appcast_build_number do |options|
    url = sh("plutil -extract SUFeedURL raw #{INFO_PLIST}").chomp
    xml = HTTParty.get(url).body
    xml_data = REXML::Document.new(xml)
    versions = xml_data.get_elements('//rss/channel/item/sparkle:version').map { |e| e.text.split('.')[0].to_i }
    versions.max
  end

  # Checks out a new branch from the current commit and pushes it
  #
  # @option [String] version (default: nil) Marketing version string
  #
  private_lane :macos_create_release_branch do |options|
    version = options[:version]
    UI.message("Creating new release branch for #{version}")
    release_branch = "#{RELEASE_BRANCH}/#{version}"

    # Abort if the branch already exists
    UI.abort_with_message!("Branch #{release_branch} already exists in this repository. Aborting.") unless Action.sh(
      'git', 'branch', '--list', release_branch
    ).empty?

    # Create the branch and push
    Action.sh('git', 'checkout', '-b', release_branch)
    Action.sh('git', 'push', '-u', 'origin', release_branch)
  end

  # Checks out a new branch from the current commit and pushes it
  #
  # @option [String] version (default: nil) Marketing version string
  #
  private_lane :macos_create_hotfix_branch do |options|
    source_version = options[:source_version]
    version = options[:new_version]
    UI.message("Creating new hotfix release branch for #{version}")
    release_branch = "#{HOTFIX_BRANCH}/#{version}"

    # Abort if the branch already exists
    UI.abort_with_message!("Branch #{release_branch} already exists in this repository. Aborting.") unless Action.sh(
      'git', 'branch', '--list', release_branch
    ).empty?

    # Create the branch and push
    if is_ci
      sha = Action.sh('git', 'rev-parse', "#{source_version}^{}").chomp
      Action.sh('gh', 'api', '--method', 'POST', '/repos/duckduckgo/macos-browser/git/refs', '-f', "ref=refs/heads/#{release_branch}", '-f', "sha=#{sha}")
      Action.sh('git', 'fetch', 'origin')
      Action.sh('git', 'checkout', release_branch)
    else
      Action.sh('git', 'fetch', '--tags')
      Action.sh('git', 'checkout', '-b', release_branch, source_version)
      Action.sh('git', 'push', '-u', 'origin', release_branch)
    end
  end

  # Updates embedded files:
  #
  # - Calls update_embedded.sh shell script
  # - Validate the changed files against the known ones list
  # - Runs automated tests
  # - Commits and pushes
  #
  private_lane :macos_update_embedded_files do |options|
    sh("cd #{PROJECT_ROOT_FOLDER} && ./scripts/update_embedded.sh")

    # Verify no unexpected files were modified
    result = sh('git', 'status')
    modified_files = result.split("\n").select { |line| line.include?('modified:') }
    modified_files = modified_files.map { |str| str.split(':')[1].strip }
    nopref_modified_files = modified_files.map { |str| str.delete_prefix('../') }
    nopref_modified_files.each do |modified_file|
      UI.abort_with_message!("Unexpected change to #{modified_file}.") unless UPGRADABLE_EMBEDDED_FILES.any? do |s|
        s.include?(modified_file)
      end
    end

    # Run tests (CI will run them separately)
    run_tests(scheme: 'DuckDuckGo Privacy Browser') unless is_ci

    # Every thing looks good: commit and push
    unless modified_files.empty?
      modified_files.each { |modified_file| sh('git', 'add', modified_file.to_s) }
      sh('git', 'commit', '-m', 'Update embedded files')
      ensure_git_status_clean
    end
  end

  # Updates version and build number in respective config files
  #
  # @option [String] version Marketing version string
  # @option [String] build_number Build number
  #
  private_lane :macos_update_version_and_build_number_config do |options|
    version = options[:version]
    build_number = options[:build_number]
    File.write(VERSION_CONFIG_PATH, "#{VERSION_CONFIG_DEFINITION} = #{version}\n")
    File.write(BUILD_NUMBER_CONFIG_PATH, "#{BUILD_NUMBER_CONFIG_DEFINITION} = #{build_number}\n")
    git_commit(
      path: [
        VERSION_CONFIG_PATH,
        BUILD_NUMBER_CONFIG_PATH
      ],
      message: "Bump version to #{version} (#{build_number})"
    )
  end

  # Updates version in the config file
  #
  # @option [String] version Marketing version string
  #
  private_lane :macos_update_version_config do |options|
    version = options[:version]
    File.write(VERSION_CONFIG_PATH, "#{VERSION_CONFIG_DEFINITION} = #{version}\n")
    git_commit(
      path: VERSION_CONFIG_PATH,
      message: "Set marketing version to #{version}"
    )
  end

  # Reads build number from the config file
  #
  # @return [String] build number read from the file, or nil in case of failure
  #
  def macos_current_build_number
    current_build_number = 0

    file_data = File.read(BUILD_NUMBER_CONFIG_PATH).split("\n")
    file_data.each do |line|
      current_build_number = line.split('=')[1].strip.to_i if line.start_with?(BUILD_NUMBER_CONFIG_DEFINITION)
    end

    current_build_number
  end

  # Updates version in the config file
  #
  # @return [String] version read from the file, or nil in case of failure
  #
  def macos_current_version
    current_version = nil

    file_data = File.read(VERSION_CONFIG_PATH).split("\n")
    file_data.each do |line|
      current_version = line.split('=')[1].strip if line.start_with?(VERSION_CONFIG_DEFINITION)
    end

    current_version
  end

  # Updates version in the config file by bumping the minor (second) number
  #
  # @param [String] current version
  # @return [String] updated version
  #
  def macos_bump_minor_version(current_version)
    current_version_array = current_version.split('.')
    new_minor_number = current_version_array[1].to_i + 1
    "#{current_version_array[0]}.#{new_minor_number}.0"
  end

  # Updates version in the config file by bumping the patch (third) number
  #
  # @param [String] current version
  # @return [String] updated version
  #
  def macos_bump_patch_version(current_version)
    current_version_array = current_version.split('.')
    new_patch_number = current_version_array[2].to_i + 1
    "#{current_version_array[0]}.#{current_version_array[1]}.#{new_patch_number}"
  end

  # Formats the version provided by the user to be Major.Minor.Patch
  #
  # @param [String] original version string
  # @return [String] formatted version string
  #
  def format_user_version(version)
    user_version = nil

    unless version.nil?
      version_numbers = version.split('.')
      version_numbers[3] = 0
      version_numbers.map! { |element| element.nil? ? 0 : element }
      user_version = "#{version_numbers[0]}.#{version_numbers[1]}.#{version_numbers[2]}"
    end

    user_version
  end

  def common_deliver_arguments(options)
    args = {
      api_key: get_api_key,
      submit_for_review: false,
      automatic_release: false,
      phased_release: true,
      force: true,
      skip_screenshots: true,
      skip_metadata: true,
      precheck_include_in_app_purchases: false,
      submission_information: {
         add_id_info_uses_idfa: false
      }
    }.merge(options)

    unless args.has_key? :username
      args[:username] = get_username(options)
    end
    args
  end
end
